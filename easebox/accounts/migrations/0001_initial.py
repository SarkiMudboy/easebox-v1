# Generated by Django 4.2.6 on 2023-10-12 17:40

import accounts.enums
from django.conf import settings
import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email_address')),
                ('phone_number', models.CharField(blank=True, null=True, unique=True, verbose_name='Phone number')),
                ('first_name', models.CharField(max_length=250, verbose_name='first name')),
                ('last_name', models.CharField(max_length=250, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('failed_login_attempts', models.IntegerField(default=0)),
                ('address', models.CharField(blank=True, null=True, verbose_name='Address')),
                ('image', models.URLField(default='', verbose_name='Profile picture url')),
                ('is_verified', models.BooleanField(default=False)),
                ('accept_terms', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=600, verbose_name='Business name')),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('address', models.CharField(blank=True, null=True, verbose_name='Business address')),
                ('image', models.URLField(default='', verbose_name='Business logo url')),
                ('rc_num', models.CharField(blank=True, null=True, verbose_name='RC Number')),
                ('category', models.CharField(blank=True, max_length=300, null=True, verbose_name='Category')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='business', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id_type', models.CharField(choices=[('NIN', 'NIN'), ('VC', 'VOTER_CARD'), ('DL', 'DRIVER_LISCENCE')], default=accounts.enums.UserVerificationIDType['NIN'])),
                ('id_verified', models.BooleanField(default=False)),
                ('id_num', models.URLField(default='', verbose_name='Document')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=600, verbose_name='Comapny name')),
                ('offices', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=500, verbose_name='Company offices'), default=list, size=2)),
                ('rc_num', models.CharField(blank=True, null=True, verbose_name='RC Number')),
                ('image', models.URLField(default='', verbose_name='Business logo url')),
                ('status', models.CharField(choices=[('AC', 'ACTIVE'), ('PN', 'PENDING'), ('SUS', 'SUSPENDED')], default=accounts.enums.AccountStatus['ACTIVE'], verbose_name='Account status')),
                ('overall_rating', models.IntegerField(blank=True, choices=[(1, 'ONE'), (2, 'TWO'), (3, 'THREE'), (4, 'FOUR'), (5, 'FIVE')], null=True, verbose_name='Rating')),
                ('customers', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company', to='accounts.business')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyRider',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id_type', models.CharField(choices=[('NIN', 'NIN'), ('VC', 'VOTER_CARD'), ('DL', 'DRIVER_LISCENCE')], default=accounts.enums.UserVerificationIDType['NIN'])),
                ('id_verified', models.BooleanField(default=False)),
                ('id_num', models.URLField(default='', verbose_name='Document')),
                ('is_available', models.BooleanField(default=False)),
                ('flagged', models.BooleanField(default=False)),
                ('rating', models.IntegerField(blank=True, choices=[(1, 'ONE'), (2, 'TWO'), (3, 'THREE'), (4, 'FOUR'), (5, 'FIVE')], null=True, verbose_name='Rating')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('visibility', models.CharField(choices=[('ON', 'ONLINE'), ('OFF', 'OFFLINE')], default=accounts.enums.Visibility['ONLINE'])),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rider', to='accounts.company')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='employed', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Products',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Saved',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id_type', models.CharField(choices=[('NIN', 'NIN'), ('VC', 'VOTER_CARD'), ('DL', 'DRIVER_LISCENCE')], default=accounts.enums.UserVerificationIDType['NIN'])),
                ('id_verified', models.BooleanField(default=False)),
                ('id_num', models.URLField(default='', verbose_name='Document')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('vehicle_type', models.CharField(choices=[('MC', 'MOTORCYCLE'), ('BC', 'BICYCLE'), ('CR', 'CAR'), ('VN', 'VAN')], default=accounts.enums.VehicleType['MOTORCYCLE'], verbose_name='Vehicle type')),
                ('brand_and_model', models.CharField(max_length=500, verbose_name='Brand and model')),
                ('plate_number', models.CharField(max_length=10, verbose_name='Plate number')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicle', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('plan', models.CharField(choices=[('FREE', 'FREE'), ('BASIC', 'BASIC')], default=accounts.enums.Plans['FREE'])),
                ('status', models.CharField(choices=[('AC', 'ACTIVE'), ('PN', 'PENDING'), ('SUS', 'SUSPENDED')], default=accounts.enums.AccountStatus['PENDING'], verbose_name='Account status')),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='account', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PricingStructure',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('factor', models.CharField(choices=[('WGHT', 'WEIGHT'), ('DIST', 'DISTANCE')], default=accounts.enums.PricingFactor['DISTANCE'], verbose_name='Pricing factor')),
                ('price', models.FloatField(default=0.0)),
                ('commission', models.IntegerField(default=0.2, editable=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricing', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IndividualRider',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id_type', models.CharField(choices=[('NIN', 'NIN'), ('VC', 'VOTER_CARD'), ('DL', 'DRIVER_LISCENCE')], default=accounts.enums.UserVerificationIDType['NIN'])),
                ('id_verified', models.BooleanField(default=False)),
                ('id_num', models.URLField(default='', verbose_name='Document')),
                ('is_available', models.BooleanField(default=False)),
                ('flagged', models.BooleanField(default=False)),
                ('rating', models.IntegerField(blank=True, choices=[(1, 'ONE'), (2, 'TWO'), (3, 'THREE'), (4, 'FOUR'), (5, 'FIVE')], null=True, verbose_name='Rating')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='individual', to=settings.AUTH_USER_MODEL)),
                ('pricing', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rider', to='accounts.pricingstructure')),
                ('reviews', models.ManyToManyField(to='accounts.review')),
                ('vehicle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.vehicle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fleet',
            fields=[
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('efficiency', models.IntegerField(default=0, help_text='In percentage')),
                ('fleet_pricing', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fleet', to='accounts.pricingstructure')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fleet', to=settings.AUTH_USER_MODEL)),
                ('riders', models.ManyToManyField(related_name='fleet', to='accounts.companyrider')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='companyrider',
            name='reviews',
            field=models.ManyToManyField(to='accounts.review'),
        ),
        migrations.AddField(
            model_name='companyrider',
            name='vehicle',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.vehicle'),
        ),
        migrations.AddField(
            model_name='company',
            name='fleets',
            field=models.ManyToManyField(related_name='company', to='accounts.fleet'),
        ),
        migrations.AddField(
            model_name='company',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='user',
            name='saved',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.saved'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
